/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: linearfold.i

#define SWIGMODULE linearfold

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "LinearFold/src/LinearFold.h"
#include "LinearFold/src/Utils/utility.h"
#include "LinearFold/src/Utils/utility_v.h"
#include "LinearFold/src/LinearFoldEval.cpp"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_linearfold_14e82afb9161ef6b(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_NONE_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_NONE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_H_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_H;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_HAIRPIN_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_HAIRPIN;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_SINGLE_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_SINGLE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_HELIX_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_HELIX;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_MULTI_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_MULTI;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_MULTI_eq_MULTI_plus_U_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_MULTI_eq_MULTI_plus_U;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_P_eq_MULTI_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_P_eq_MULTI;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_M2_eq_M_plus_P_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_M2_eq_M_plus_P;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_M_eq_M2_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_M_eq_M2;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_M_eq_M_plus_U_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_M_eq_M_plus_U;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_M_eq_P_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_M_eq_P;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_C_eq_C_plus_U_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_C_eq_C_plus_U;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MANNER_C_eq_C_plus_P_linearfold_14e82afb9161ef6b() {
  Manner result;
  intgo _swig_go_result;
  
  
  result = MANNER_C_eq_C_plus_P;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_State_score_set_linearfold_14e82afb9161ef6b(State *_swig_go_0, double _swig_go_1) {
  State *arg1 = (State *) 0 ;
  value_type arg2 ;
  
  arg1 = *(State **)&_swig_go_0; 
  arg2 = (value_type)_swig_go_1; 
  
  if (arg1) (arg1)->score = arg2;
  
}


double _wrap_State_score_get_linearfold_14e82afb9161ef6b(State *_swig_go_0) {
  State *arg1 = (State *) 0 ;
  value_type result;
  double _swig_go_result;
  
  arg1 = *(State **)&_swig_go_0; 
  
  result = (value_type) ((arg1)->score);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_State_manner_set_linearfold_14e82afb9161ef6b(State *_swig_go_0, intgo _swig_go_1) {
  State *arg1 = (State *) 0 ;
  Manner arg2 ;
  
  arg1 = *(State **)&_swig_go_0; 
  arg2 = (Manner)_swig_go_1; 
  
  if (arg1) (arg1)->manner = arg2;
  
}


intgo _wrap_State_manner_get_linearfold_14e82afb9161ef6b(State *_swig_go_0) {
  State *arg1 = (State *) 0 ;
  Manner result;
  intgo _swig_go_result;
  
  arg1 = *(State **)&_swig_go_0; 
  
  result = (Manner) ((arg1)->manner);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_State_trace_set_linearfold_14e82afb9161ef6b(State *_swig_go_0, State::TraceInfo *_swig_go_1) {
  State *arg1 = (State *) 0 ;
  State::TraceInfo *arg2 = (State::TraceInfo *) 0 ;
  
  arg1 = *(State **)&_swig_go_0; 
  arg2 = *(State::TraceInfo **)&_swig_go_1; 
  
  if (arg1) (arg1)->trace = *arg2;
  
}


State::TraceInfo *_wrap_State_trace_get_linearfold_14e82afb9161ef6b(State *_swig_go_0) {
  State *arg1 = (State *) 0 ;
  State::TraceInfo *result = 0 ;
  State::TraceInfo *_swig_go_result;
  
  arg1 = *(State **)&_swig_go_0; 
  
  result = (State::TraceInfo *)& ((arg1)->trace);
  *(State::TraceInfo **)&_swig_go_result = (State::TraceInfo *)result; 
  return _swig_go_result;
}


State *_wrap_new_State__SWIG_0_linearfold_14e82afb9161ef6b() {
  State *result = 0 ;
  State *_swig_go_result;
  
  
  result = (State *)new State();
  *(State **)&_swig_go_result = (State *)result; 
  return _swig_go_result;
}


State *_wrap_new_State__SWIG_1_linearfold_14e82afb9161ef6b(double _swig_go_0, intgo _swig_go_1) {
  value_type arg1 ;
  Manner arg2 ;
  State *result = 0 ;
  State *_swig_go_result;
  
  arg1 = (value_type)_swig_go_0; 
  arg2 = (Manner)_swig_go_1; 
  
  result = (State *)new State(arg1,arg2);
  *(State **)&_swig_go_result = (State *)result; 
  return _swig_go_result;
}


void _wrap_State_set__SWIG_0_linearfold_14e82afb9161ef6b(State *_swig_go_0, double _swig_go_1, intgo _swig_go_2) {
  State *arg1 = (State *) 0 ;
  value_type arg2 ;
  Manner arg3 ;
  
  arg1 = *(State **)&_swig_go_0; 
  arg2 = (value_type)_swig_go_1; 
  arg3 = (Manner)_swig_go_2; 
  
  (arg1)->set(arg2,arg3);
  
}


void _wrap_State_set__SWIG_1_linearfold_14e82afb9161ef6b(State *_swig_go_0, double _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  State *arg1 = (State *) 0 ;
  value_type arg2 ;
  Manner arg3 ;
  int arg4 ;
  
  arg1 = *(State **)&_swig_go_0; 
  arg2 = (value_type)_swig_go_1; 
  arg3 = (Manner)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  (arg1)->set(arg2,arg3,arg4);
  
}


void _wrap_State_set__SWIG_2_linearfold_14e82afb9161ef6b(State *_swig_go_0, double _swig_go_1, intgo _swig_go_2, char _swig_go_3, intgo _swig_go_4) {
  State *arg1 = (State *) 0 ;
  value_type arg2 ;
  Manner arg3 ;
  char arg4 ;
  int arg5 ;
  
  arg1 = *(State **)&_swig_go_0; 
  arg2 = (value_type)_swig_go_1; 
  arg3 = (Manner)_swig_go_2; 
  arg4 = (char)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  
  (arg1)->set(arg2,arg3,arg4,arg5);
  
}


void _wrap_delete_State_linearfold_14e82afb9161ef6b(State *_swig_go_0) {
  State *arg1 = (State *) 0 ;
  
  arg1 = *(State **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_TraceInfo_split_set_linearfold_14e82afb9161ef6b(State::TraceInfo *_swig_go_0, intgo _swig_go_1) {
  State::TraceInfo *arg1 = (State::TraceInfo *) 0 ;
  int arg2 ;
  
  arg1 = *(State::TraceInfo **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->split = arg2;
  
}


intgo _wrap_TraceInfo_split_get_linearfold_14e82afb9161ef6b(State::TraceInfo *_swig_go_0) {
  State::TraceInfo *arg1 = (State::TraceInfo *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(State::TraceInfo **)&_swig_go_0; 
  
  result = (int) ((arg1)->split);
  _swig_go_result = result; 
  return _swig_go_result;
}


State::TraceInfo *_wrap_new_TraceInfo_linearfold_14e82afb9161ef6b() {
  State::TraceInfo *result = 0 ;
  State::TraceInfo *_swig_go_result;
  
  
  result = (State::TraceInfo *)new State::TraceInfo();
  *(State::TraceInfo **)&_swig_go_result = (State::TraceInfo *)result; 
  return _swig_go_result;
}


void _wrap_delete_TraceInfo_linearfold_14e82afb9161ef6b(State::TraceInfo *_swig_go_0) {
  State::TraceInfo *arg1 = (State::TraceInfo *) 0 ;
  
  arg1 = *(State::TraceInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_BeamCKYParser_beam_set_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0, intgo _swig_go_1) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  int arg2 ;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->beam = arg2;
  
}


intgo _wrap_BeamCKYParser_beam_get_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  
  result = (int) ((arg1)->beam);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_BeamCKYParser_no_sharp_turn_set_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0, bool _swig_go_1) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  bool arg2 ;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->no_sharp_turn = arg2;
  
}


bool _wrap_BeamCKYParser_no_sharp_turn_get_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  
  result = (bool) ((arg1)->no_sharp_turn);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_BeamCKYParser_is_verbose_set_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0, bool _swig_go_1) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  bool arg2 ;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->is_verbose = arg2;
  
}


bool _wrap_BeamCKYParser_is_verbose_get_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  
  result = (bool) ((arg1)->is_verbose);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_BeamCKYParser_use_constraints_set_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0, bool _swig_go_1) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  bool arg2 ;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->use_constraints = arg2;
  
}


bool _wrap_BeamCKYParser_use_constraints_get_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  
  result = (bool) ((arg1)->use_constraints);
  _swig_go_result = result; 
  return _swig_go_result;
}


BeamCKYParser *_wrap_new_BeamCKYParser__SWIG_0_linearfold_14e82afb9161ef6b(intgo _swig_go_0, bool _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  int arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  BeamCKYParser *result = 0 ;
  BeamCKYParser *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (BeamCKYParser *)new BeamCKYParser(arg1,arg2,arg3,arg4);
  *(BeamCKYParser **)&_swig_go_result = (BeamCKYParser *)result; 
  return _swig_go_result;
}


BeamCKYParser *_wrap_new_BeamCKYParser__SWIG_1_linearfold_14e82afb9161ef6b(intgo _swig_go_0, bool _swig_go_1, bool _swig_go_2) {
  int arg1 ;
  bool arg2 ;
  bool arg3 ;
  BeamCKYParser *result = 0 ;
  BeamCKYParser *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (BeamCKYParser *)new BeamCKYParser(arg1,arg2,arg3);
  *(BeamCKYParser **)&_swig_go_result = (BeamCKYParser *)result; 
  return _swig_go_result;
}


BeamCKYParser *_wrap_new_BeamCKYParser__SWIG_2_linearfold_14e82afb9161ef6b(intgo _swig_go_0, bool _swig_go_1) {
  int arg1 ;
  bool arg2 ;
  BeamCKYParser *result = 0 ;
  BeamCKYParser *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (BeamCKYParser *)new BeamCKYParser(arg1,arg2);
  *(BeamCKYParser **)&_swig_go_result = (BeamCKYParser *)result; 
  return _swig_go_result;
}


BeamCKYParser *_wrap_new_BeamCKYParser__SWIG_3_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  BeamCKYParser *result = 0 ;
  BeamCKYParser *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (BeamCKYParser *)new BeamCKYParser(arg1);
  *(BeamCKYParser **)&_swig_go_result = (BeamCKYParser *)result; 
  return _swig_go_result;
}


BeamCKYParser *_wrap_new_BeamCKYParser__SWIG_4_linearfold_14e82afb9161ef6b() {
  BeamCKYParser *result = 0 ;
  BeamCKYParser *_swig_go_result;
  
  
  result = (BeamCKYParser *)new BeamCKYParser();
  *(BeamCKYParser **)&_swig_go_result = (BeamCKYParser *)result; 
  return _swig_go_result;
}


BeamCKYParser::DecoderResult *_wrap_BeamCKYParser_parse_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0, std::string *_swig_go_1, std::vector< int > *_swig_go_2) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = (std::vector< int > *) 0 ;
  BeamCKYParser::DecoderResult result;
  BeamCKYParser::DecoderResult *_swig_go_result;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::vector< int > **)&_swig_go_2; 
  
  result = (arg1)->parse(*arg2,arg3);
  *(BeamCKYParser::DecoderResult **)&_swig_go_result = new BeamCKYParser::DecoderResult(result); 
  return _swig_go_result;
}


void _wrap_delete_BeamCKYParser_linearfold_14e82afb9161ef6b(BeamCKYParser *_swig_go_0) {
  BeamCKYParser *arg1 = (BeamCKYParser *) 0 ;
  
  arg1 = *(BeamCKYParser **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_DecoderResult_structure_set_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0, std::string *_swig_go_1) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  
  argp2 = (std::string *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::string");
  }
  arg2 = (std::string)*argp2;
  
  
  if (arg1) (arg1)->structure = arg2;
  
}


std::string *_wrap_DecoderResult_structure_get_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  
  result =  ((arg1)->structure);
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


void _wrap_DecoderResult_score_set_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0, double _swig_go_1) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  value_type arg2 ;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  arg2 = (value_type)_swig_go_1; 
  
  if (arg1) (arg1)->score = arg2;
  
}


double _wrap_DecoderResult_score_get_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  value_type result;
  double _swig_go_result;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  
  result = (value_type) ((arg1)->score);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DecoderResult_num_states_set_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0, long long _swig_go_1) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  unsigned long arg2 ;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  arg2 = (unsigned long)_swig_go_1; 
  
  if (arg1) (arg1)->num_states = arg2;
  
}


long long _wrap_DecoderResult_num_states_get_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  unsigned long result;
  long long _swig_go_result;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  
  result = (unsigned long) ((arg1)->num_states);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DecoderResult_time_set_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0, double _swig_go_1) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  double arg2 ;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->time = arg2;
  
}


double _wrap_DecoderResult_time_get_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  
  result = (double) ((arg1)->time);
  _swig_go_result = result; 
  return _swig_go_result;
}


BeamCKYParser::DecoderResult *_wrap_new_DecoderResult_linearfold_14e82afb9161ef6b() {
  BeamCKYParser::DecoderResult *result = 0 ;
  BeamCKYParser::DecoderResult *_swig_go_result;
  
  
  result = (BeamCKYParser::DecoderResult *)new BeamCKYParser::DecoderResult();
  *(BeamCKYParser::DecoderResult **)&_swig_go_result = (BeamCKYParser::DecoderResult *)result; 
  return _swig_go_result;
}


void _wrap_delete_DecoderResult_linearfold_14e82afb9161ef6b(BeamCKYParser::DecoderResult *_swig_go_0) {
  BeamCKYParser::DecoderResult *arg1 = (BeamCKYParser::DecoderResult *) 0 ;
  
  arg1 = *(BeamCKYParser::DecoderResult **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__allowed_pairs_set_linearfold_14e82afb9161ef6b(bool **_swig_go_0) {
  bool (*arg1)[5] ;
  
  arg1 = *(bool (**)[5])&_swig_go_0; 
  
  {
    bool (*inp)[5] = (bool (*)[5])(arg1);
    bool (*dest)[5] = (bool (*)[5])(_allowed_pairs);
    size_t ii = 0;
    for (; ii < 5; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 5; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


bool **_wrap__allowed_pairs_get_linearfold_14e82afb9161ef6b() {
  bool (*result)[5] = 0 ;
  bool **_swig_go_result;
  
  
  result = (bool (*)[5])(bool (*)[5])_allowed_pairs;
  *(bool (**)[5])&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap__helix_stacking_set_linearfold_14e82afb9161ef6b(bool ****_swig_go_0) {
  bool (*arg1)[5][5][5] ;
  
  arg1 = *(bool (**)[5][5][5])&_swig_go_0; 
  
  {
    bool (*inp)[5] = (bool (*)[5])(arg1);
    bool (*dest)[5] = (bool (*)[5])(_helix_stacking);
    size_t ii = 0;
    for (; ii < 5; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 5; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


bool ****_wrap__helix_stacking_get_linearfold_14e82afb9161ef6b() {
  bool (*result)[5][5][5] = 0 ;
  bool ****_swig_go_result;
  
  
  result = (bool (*)[5][5][5])(bool (*)[5][5][5])_helix_stacking;
  *(bool (**)[5][5][5])&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_cache_single_set_linearfold_14e82afb9161ef6b(double **_swig_go_0) {
  double (*arg1)[30+1] ;
  
  arg1 = *(double (**)[30+1])&_swig_go_0; 
  
  {
    double (*inp)[30+1] = (double (*)[30+1])(arg1);
    double (*dest)[30+1] = (double (*)[30+1])(cache_single);
    size_t ii = 0;
    for (; ii < 30+1; ++ii) {
      double *ip = inp[ii];
      double *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 30+1; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


double **_wrap_cache_single_get_linearfold_14e82afb9161ef6b() {
  double (*result)[30+1] = 0 ;
  double **_swig_go_result;
  
  
  result = (double (*)[30+1])(double (*)[30+1])cache_single;
  *(double (**)[30+1])&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_initialize_cachesingle_linearfold_14e82afb9161ef6b() {
  initialize_cachesingle();
  
}


void _wrap_initialize_linearfold_14e82afb9161ef6b() {
  initialize();
  
}


double _wrap_base_pair_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)base_pair_score(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_helix_stacking_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (double)helix_stacking_score(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_helix_closing_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)helix_closing_score(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_terminal_mismatch_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (double)terminal_mismatch_score(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_bulge_nuc_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)bulge_nuc_score(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_internal_nuc_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)internal_nuc_score(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_dangle_left_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (double)dangle_left_score(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_dangle_right_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (double)dangle_right_score(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_hairpin_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)hairpin_score(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_internal_length_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)internal_length_score(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_internal_explicit_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)internal_explicit_score(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_internal_sym_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)internal_sym_score(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_internal_asym_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)internal_asym_score(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_bulge_length_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)bulge_length_score(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_hairpin_at_least_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)hairpin_at_least_score(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_buldge_length_at_least_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)buldge_length_at_least_score(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_internal_length_at_least_score_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)internal_length_at_least_score(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_junction_A_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  
  result = (double)score_junction_A(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_junction_B_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  result = (double)score_junction_B(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_hairpin_length_linearfold_14e82afb9161ef6b(intgo _swig_go_0) {
  int arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (double)score_hairpin_length(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_hairpin_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  result = (double)score_hairpin(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_helix_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (double)score_helix(arg1,arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_single_nuc_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  result = (double)score_single_nuc(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_single_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6, intgo _swig_go_7, intgo _swig_go_8, intgo _swig_go_9, intgo _swig_go_10, intgo _swig_go_11, intgo _swig_go_12) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  arg8 = (int)_swig_go_7; 
  arg9 = (int)_swig_go_8; 
  arg10 = (int)_swig_go_9; 
  arg11 = (int)_swig_go_10; 
  arg12 = (int)_swig_go_11; 
  arg13 = (int)_swig_go_12; 
  
  result = (double)score_single(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_single_without_junctionB_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6, intgo _swig_go_7) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  arg8 = (int)_swig_go_7; 
  
  result = (double)score_single_without_junctionB(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_multi_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  
  result = (double)score_multi(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_multi_unpaired_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)score_multi_unpaired(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_M1_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6, intgo _swig_go_7) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  arg8 = (int)_swig_go_7; 
  
  result = (double)score_M1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_external_paired_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  
  result = (double)score_external_paired(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_score_external_unpaired_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (double)score_external_unpaired(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MIN2_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)MIN2(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MAX2_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)MAX2(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_v_init_tetra_hex_tri_linearfold_14e82afb9161ef6b(std::string *_swig_go_0, intgo _swig_go_1, std::vector< int > *_swig_go_2, std::vector< int > *_swig_go_3, std::vector< int > *_swig_go_4) {
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  
  arg1 = *(std::string **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< int > **)&_swig_go_2; 
  arg4 = *(std::vector< int > **)&_swig_go_3; 
  arg5 = *(std::vector< int > **)&_swig_go_4; 
  
  v_init_tetra_hex_tri(*arg1,arg2,*arg3,*arg4,*arg5);
  
}


intgo _wrap_v_score_hairpin__SWIG_0_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  
  result = (int)v_score_hairpin(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_v_score_hairpin__SWIG_1_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  
  result = (int)v_score_hairpin(arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_v_score_single_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6, intgo _swig_go_7, intgo _swig_go_8, intgo _swig_go_9, intgo _swig_go_10, intgo _swig_go_11) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  arg8 = (int)_swig_go_7; 
  arg9 = (int)_swig_go_8; 
  arg10 = (int)_swig_go_9; 
  arg11 = (int)_swig_go_10; 
  arg12 = (int)_swig_go_11; 
  
  result = (int)v_score_single(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_E_MLstem_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)E_MLstem(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_v_score_M1_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6, intgo _swig_go_7) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  arg8 = (int)_swig_go_7; 
  
  result = (int)v_score_M1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_v_score_multi_unpaired_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)v_score_multi_unpaired(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_v_score_multi_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  
  result = (int)v_score_multi(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_v_score_external_paired_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (int)_swig_go_4; 
  arg6 = (int)_swig_go_5; 
  arg7 = (int)_swig_go_6; 
  
  result = (int)v_score_external_paired(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_v_score_external_unpaired_linearfold_14e82afb9161ef6b(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)v_score_external_unpaired(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_eval_linearfold_14e82afb9161ef6b(string *_swig_go_0, string *_swig_go_1, bool _swig_go_2) {
  string arg1 ;
  string arg2 ;
  bool arg3 ;
  string *argp1 ;
  string *argp2 ;
  long result;
  long long _swig_go_result;
  
  
  argp1 = (string *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null string");
  }
  arg1 = (string)*argp1;
  
  
  argp2 = (string *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null string");
  }
  arg2 = (string)*argp2;
  
  arg3 = (bool)_swig_go_2; 
  
  result = (long)eval(arg1,arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

